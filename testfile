pipeline{
    agent any

    environment {
                GITHUB_TOKEN  = credentials('github_tok')
                REPO_OWNER = 'mooncakk'
                REPO_NAME = 'jenkins-datascientest'
    }
    parameters {
        string(
            name: 'BRANCH_NAME',
            defaultValue: 'staging',
            description: 'Source branch for the pull request'
        )
        string(
            name: 'BASE_BRANCH',
            defaultValue: 'main',
            description: 'Target branch for the pull request'
        )
        choice( //Modifier
            name: 'MERGE_METHOD',
            choices: ['SQUASH', 'MERGE', 'REBASE'],
            description: 'Auto-merge method'
        )
        string(
            name: 'PR_NUMBER',
            defaultValue: '17',
            description: 'pull request number'
        )
        string(
            name: 'env.PR_NODE_ID',
            defaultValue: 'PR_kwDOPOTiSM6iSH8d',
            description: 'pull request ID'
        )
    }

    stages {

        // üîß FIXED VERSION with proper null checking
        stage('Enable Auto-Merge') {
            steps {
                script {
                    echo "üîÑ Enabling auto-merge with method: ${params.MERGE_METHOD}..."

                    // üîå REQUIRES: HTTP Request Plugin
                    def autoMergeResponse = httpRequest(
                        httpMode: 'POST',
                        url: 'https://api.github.com/graphql',
                        customHeaders: [
                            [name: 'Authorization', value: 'token $GITHUB_TOKEN'],
                            [name: 'Content-Type', value: 'application/json']
                        ],
                        validResponseCodes: '200:299',
                        requestBody: """{
                            "query": "mutation { enablePullRequestAutoMerge(input: { pullRequestId: \\"${env.PR_NODE_ID}\\", mergeMethod: ${params.MERGE_METHOD} }) { pullRequest { autoMergeRequest { enabledAt enabledBy { login } } } } }"
                        }"""
                    )

                    // üîå REQUIRES: Pipeline Utility Steps Plugin
                    def result = readJSON text: autoMergeResponse.content

                    // Debug: Show the full response
                    echo "üîç GraphQL Response: ${autoMergeResponse.content}"

                    // Check for GraphQL errors first
                    if (result.errors) {
                        echo "‚ùå GraphQL Errors found:"
                        result.errors.each { error ->
                            echo "  - ${error.message}"
                            echo "  - Location: ${error.locations}"
                        }
                        error("GraphQL mutation failed with errors")
                    }

                    // Check if data exists
                    if (!result.data) {
                        echo "‚ùå No data in GraphQL response"
                        error("GraphQL response missing data field")
                    }

                    // Check if enablePullRequestAutoMerge exists
                    if (!result.data.enablePullRequestAutoMerge) {
                        echo "‚ùå enablePullRequestAutoMerge is null/missing"
                        echo "This usually means:"
                        echo "  1. Invalid PR Node ID: ${env.PR_NODE_ID}"
                        echo "  2. PR doesn't exist or was closed"
                        echo "  3. Insufficient permissions"
                        error("Failed to enable auto-merge - mutation returned null")
                    }

                    // Check if pullRequest is null
                    if (!result.data.enablePullRequestAutoMerge.pullRequest) {
                        echo "‚ùå pullRequest is null in response"
                        echo "Possible causes:"
                        echo "  1. PR Node ID '${env.PR_NODE_ID}' is invalid"
                        echo "  2. PR was already merged or closed"
                        echo "  3. GitHub token lacks 'repo' permissions"
                        echo "  4. Repository doesn't allow auto-merge"

                        // Let's verify the PR still exists
                        verifyPRExists()
                        error("Auto-merge failed - pullRequest is null")
                    }

                    // Safe access to autoMergeRequest
                    def pullRequest = result.data.enablePullRequestAutoMerge.pullRequest
                    if (pullRequest.autoMergeRequest) {
                        def autoMerge = pullRequest.autoMergeRequest
                        echo "‚úÖ Auto-merge enabled successfully!"
                        echo "‚è∞ Enabled at: ${autoMerge.enabledAt}"
                        echo "üë§ Enabled by: ${autoMerge.enabledBy.login}"
                        env.AUTO_MERGE_ENABLED = 'true'
                    } else {
                        echo "‚ö†Ô∏è Auto-merge request is null - checking why..."

                        // Check if auto-merge is already enabled
                        checkExistingAutoMerge()

                        echo "‚ùå Failed to enable auto-merge"
                        error("Auto-merge setup incomplete")
                    }
                }
            }
        }

        // Helper function to verify PR exists
        def verifyPRExists() {
            echo "üîç Verifying PR #${env.PR_NUMBER} still exists..."

            try {
                // üîå REQUIRES: HTTP Request Plugin
                def prCheckResponse = httpRequest(
                    httpMode: 'GET',
                    url: "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/pulls/${env.PR_NUMBER}",
                    customHeaders: [
                        [name: 'Authorization', value: 'token $GITHUB_TOKEN']
                    ],
                    validResponseCodes: '200:499'  // Accept 404 as valid response
                )

                if (prCheckResponse.status == 200) {
                    // üîå REQUIRES: Pipeline Utility Steps Plugin
                    def prData = readJSON text: prCheckResponse.content
                    echo "‚úÖ PR exists: ${prData.title}"
                    echo "üìä State: ${prData.state}"
                    echo "üîó URL: ${prData.html_url}"
                    echo "üÜî Node ID: ${prData.node_id}"

                    // Verify node ID matches
                    if (prData.node_id != env.PR_NODE_ID) {
                        echo "‚ö†Ô∏è Node ID mismatch!"
                        echo "  Expected: ${env.PR_NODE_ID}"
                        echo "  Actual: ${prData.node_id}"
                        env.PR_NODE_ID = prData.node_id  // Update with correct ID
                    }

                } else if (prCheckResponse.status == 404) {
                    echo "‚ùå PR #${env.PR_NUMBER} not found (404)"
                    echo "The PR may have been deleted or merged already"

                } else {
                    echo "‚ö†Ô∏è Unexpected status: ${prCheckResponse.status}"
                    echo "Response: ${prCheckResponse.content}"
                }

            } catch (Exception e) {
                echo "‚ùå Error checking PR: ${e.message}"
            }
        }

        // Helper function to check existing auto-merge
        def checkExistingAutoMerge() {
            echo "üîç Checking if auto-merge is already enabled..."

            try {
                // Query PR details including auto-merge status
                // üîå REQUIRES: HTTP Request Plugin
                def statusResponse = httpRequest(
                    httpMode: 'POST',
                    url: 'https://api.github.com/graphql',
                    customHeaders: [
                        [name: 'Authorization', value: 'token $GITHUB_TOKEN'],
                        [name: 'Content-Type', value: 'application/json']
                    ],
                    requestBody: """{
                        "query": "query { node(id: \\"${env.PR_NODE_ID}\\") { ... on PullRequest { title state autoMergeRequest { enabledAt enabledBy { login } } } } }"
                    }"""
                )

                // üîå REQUIRES: Pipeline Utility Steps Plugin
                def statusResult = readJSON text: statusResponse.content

                if (statusResult.data?.node) {
                    def pr = statusResult.data.node
                    echo "üìä PR Status: ${pr.title} (${pr.state})"

                    if (pr.autoMergeRequest) {
                        echo "‚úÖ Auto-merge already enabled!"
                        echo "‚è∞ Enabled at: ${pr.autoMergeRequest.enabledAt}"
                        echo "üë§ Enabled by: ${pr.autoMergeRequest.enabledBy.login}"
                        env.AUTO_MERGE_ENABLED = 'true'
                    } else {
                        echo "‚ùå Auto-merge not enabled"
                        echo "Possible reasons:"
                        echo "  1. Branch protection rules prevent auto-merge"
                        echo "  2. Required status checks not configured"
                        echo "  3. Repository settings don't allow auto-merge"
                    }
                } else {
                    echo "‚ùå Could not fetch PR status"
                }

            } catch (Exception e) {
                echo "‚ö†Ô∏è Error checking auto-merge status: ${e.message}"
            }
        }

        // üß™ DEBUGGING VERSION - Use this to troubleshoot
        stage('Debug Auto-Merge (Troubleshooting)') {
            steps {
                script {
                    echo "üêõ DEBUG MODE: Investigating auto-merge issues..."

                    // 1. Check GitHub token permissions
                    echo "1Ô∏è‚É£ Checking GitHub token permissions..."
                    def userResponse = httpRequest(
                        httpMode: 'GET',
                        url: 'https://api.github.com/user',
                        customHeaders: [
                            [name: 'Authorization', value: 'token $GITHUB_TOKEN']
                        ]
                    )
                    def userData = readJSON text: userResponse.content
                    echo "üë§ Authenticated as: ${userData.login}"

                    // 2. Check repository permissions
                    echo "2Ô∏è‚É£ Checking repository access..."
                    def repoResponse = httpRequest(
                        httpMode: 'GET',
                        url: "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}",
                        customHeaders: [
                            [name: 'Authorization', value: 'token $GITHUB_TOKEN']
                        ],
                        validResponseCodes: '200:499'
                    )

                    if (repoResponse.status == 200) {
                        def repoData = readJSON text: repoResponse.content
                        echo "‚úÖ Repository access: ${repoData.full_name}"
                        echo "üîí Permissions: admin=${repoData.permissions?.admin}, push=${repoData.permissions?.push}"
                    } else {
                        echo "‚ùå Repository access denied (${repoResponse.status})"
                    }

                    // 3. Check PR details with GraphQL
                    echo "3Ô∏è‚É£ Checking PR with GraphQL..."
                    def prQueryResponse = httpRequest(
                        httpMode: 'POST',
                        url: 'https://api.github.com/graphql',
                        customHeaders: [
                            [name: 'Authorization', value: 'token $GITHUB_TOKEN'],
                            [name: 'Content-Type', value: 'application/json']
                        ],
                        requestBody: """{
                            "query": "query { node(id: \\"${env.PR_NODE_ID}\\") { id ... on PullRequest { number title state mergeable mergeableState autoMergeRequest { enabledAt } } } }"
                        }"""
                    )

                    def prQueryResult = readJSON text: prQueryResponse.content
                    echo "üìÑ GraphQL PR Query Result:"
                    echo "${prQueryResponse.content}"

                    // 4. Test auto-merge mutation with detailed response
                    echo "4Ô∏è‚É£ Testing auto-merge mutation..."
                    def testResponse = httpRequest(
                        httpMode: 'POST',
                        url: 'https://api.github.com/graphql',
                        customHeaders: [
                            [name: 'Authorization', value: 'token $GITHUB_TOKEN'],
                            [name: 'Content-Type', value: 'application/json']
                        ],
                        validResponseCodes: '200:299',
                        requestBody: """{
                            "query": "mutation { enablePullRequestAutoMerge(input: { pullRequestId: \\"${env.PR_NODE_ID}\\", mergeMethod: ${params.MERGE_METHOD} }) { clientMutationId pullRequest { id title autoMergeRequest { enabledAt enabledBy { login } mergeMethod } } } }"
                        }"""
                    )

                    echo "üî¨ Full Auto-Merge Response:"
                    echo "${testResponse.content}"
                }
            }
        }
    }
}