pipeline{
    agent any

    environment {
                GITHUB_TOKEN  = credentials('github_tok')
                REPO_OWNER = 'mooncakk'
                REPO_NAME = 'jenkins-datascientest'
    }
    parameters {
        string(
            name: 'BRANCH_NAME',
            defaultValue: 'staging',
            description: 'Source branch for the pull request'
        )
        string(
            name: 'BASE_BRANCH',
            defaultValue: 'main',
            description: 'Target branch for the pull request'
        )
        choice( //Modifier
            name: 'MERGE_METHOD',
            choices: ['SQUASH', 'MERGE', 'REBASE'],
            description: 'Auto-merge method'
        )
        string(
            name: 'PR_NUMBER',
            defaultValue: '17',
            description: 'pull request number'
        )
        string(
            name: 'env.PR_NODE_ID',
            defaultValue: 'PR_kwDOPOTiSM6iSH8d',
            description: 'pull request ID'
        )
    }

    stages {

        stage('Enable Auto-Merge (Fixed)') {
            steps {
                script {
                    echo "üîÑ Enabling auto-merge with method: ${params.MERGE_METHOD}..."

                    // üîå REQUIRES: HTTP Request Plugin
                    def autoMergeResponse = httpRequest(
                        httpMode: 'POST',
                        url: 'https://api.github.com/graphql',
                        customHeaders: [
                            [name: 'Authorization', value: "token ${GITHUB_TOKEN}"],
                            [name: 'Content-Type', value: 'application/json']
                        ],
                        validResponseCodes: '200:299',
                        requestBody: """{
                            "query": "mutation { enablePullRequestAutoMerge(input: { pullRequestId: \\"${env.PR_NODE_ID}\\", mergeMethod: ${params.MERGE_METHOD} }) { clientMutationId pullRequest { id number title autoMergeRequest { enabledAt enabledBy { login } mergeMethod } } } }"
                        }"""
                    )

                    // üîå REQUIRES: Pipeline Utility Steps Plugin
                    def result = readJSON text: autoMergeResponse.content

                    // Debug: Show the full response
                    echo "üîç Auto-Merge Response: ${autoMergeResponse.content}"

                    // Check for GraphQL errors
                    if (result.errors) {
                        echo "‚ùå GraphQL Errors:"
                        result.errors.each { error ->
                            echo "  - Message: ${error.message}"
                            echo "  - Path: ${error.path}"
                            if (error.extensions) {
                                echo "  - Code: ${error.extensions.code}"
                                echo "  - Type: ${error.extensions.typeName}"
                                echo "  - Field: ${error.extensions.fieldName}"
                            }
                        }
                        error("GraphQL mutation failed")
                    }

                    // Check for successful auto-merge
                    if (result.data?.enablePullRequestAutoMerge?.pullRequest) {
                        def pr = result.data.enablePullRequestAutoMerge.pullRequest
                        echo "‚úÖ Auto-merge operation completed!"
                        echo "üìã PR: #${pr.number} - ${pr.title}"

                        if (pr.autoMergeRequest) {
                            echo "‚úÖ Auto-merge enabled successfully!"
                            echo "‚è∞ Enabled at: ${pr.autoMergeRequest.enabledAt}"
                            echo "üë§ Enabled by: ${pr.autoMergeRequest.enabledBy.login}"
                            echo "üîß Method: ${pr.autoMergeRequest.mergeMethod}"
                            env.AUTO_MERGE_ENABLED = 'true'
                        } else {
                            echo "‚ö†Ô∏è Auto-merge not enabled - checking repository settings..."
                            checkRepositoryAutoMergeSettings()
                        }
                    } else {
                        echo "‚ùå Failed to enable auto-merge"
                        echo "Mutation returned no PR data"
                        error("Auto-merge setup failed")
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                echo """
                SUCCESS: MERGE Created!

                Summary:
                - PR Number: #${PR_NUMBER}
                //- PR URL: ${env.PR_URL}
                //- Source Branch: ${params.BRANCH_NAME}
                //- Target Branch: ${params.BASE_BRANCH}
                - Auto-Merge: Enabled (${params.MERGE_METHOD})
                //- Enabled At: ${env.AUTO_MERGE_ENABLED_AT}
                """
            }
        }
        failure {
            script {
                echo "Pipeline failed auto-merge setup"
            }
        }
    }
}