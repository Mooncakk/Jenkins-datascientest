pipeline{
    agent any

    environment {
                GITHUB_TOKEN  = credentials('github_tok')
                REPO_OWNER = 'mooncakk'
                REPO_NAME = 'jenkins-datascientest'
    }
    parameters {
        string(
            name: 'BRANCH_NAME',
            defaultValue: 'staging',
            description: 'Source branch for the pull request'
        )
        string(
            name: 'BASE_BRANCH',
            defaultValue: 'main',
            description: 'Target branch for the pull request'
        )
        choice( //Modifier
            name: 'MERGE_METHOD',
            choices: ['SQUASH', 'MERGE', 'REBASE'],
            description: 'Auto-merge method'
        )
        string(
            name: 'PR_NUMBER',
            defaultValue: '17',
            description: 'pull request number'
        )
        string(
            name: 'env.PR_NODE_ID',
            defaultValue: 'PR_kwDOPOTiSM6iSH8d',
            description: 'pull request ID'
        )
    }

    stages {

        stage('Enable Auto-Merge') {
            steps {
                script {
                    echo "Enabling auto-merge with method: ${params.MERGE_METHOD}"

                    // Step 2: Enable auto-merge using GitHub GraphQL API
                    def autoMergeResponse = httpRequest(
                        httpMode: 'POST',
                        url: 'https://api.github.com/graphql',
                        customHeaders: [
                            [name: 'Authorization', value: "Bearer $GITHUB_TOKEN"],
                            [name: 'Content-Type', value: 'application/json']
                        ],
                        validResponseCodes: '200:299',
                        requestBody: """{
                            "query": "mutation { enablePullRequestAutoMerge(input: { pullRequestId: \\"${env.PR_NODE_ID}\\", mergeMethod: ${params.MERGE_METHOD} }) { pullRequest { autoMergeRequest { enabledAt enabledBy { login } } } } }"
                        }"""
                    )

                    // Parse auto-merge response
                    def autoMergeData = readJSON text: autoMergeResponse.content

                    if (autoMergeData.data?.enablePullRequestAutoMerge?.pullRequest?.autoMergeRequest) {
                        def autoMergeRequest = autoMergeData.data.enablePullRequestAutoMerge.pullRequest.autoMergeRequest
                        env.AUTO_MERGE_ENABLED_AT = autoMergeRequest.enabledAt
                        env.AUTO_MERGE_ENABLED_BY = autoMergeRequest.enabledBy.login

                        //echo "‚úÖ Auto-merge enabled successfully!" A SUPPRIMER
                        //echo "‚è∞ Enabled at: ${env.AUTO_MERGE_ENABLED_AT}"
                        //echo "üë§ Enabled by: ${env.AUTO_MERGE_ENABLED_BY}"

                        // Add informational comment to PR
                        httpRequest(
                            httpMode: 'POST',
                            url: "https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/issues/${PR_NUMBER}/comments",
                            customHeaders: [
                                [name: 'Authorization', value: "Bearer $GITHUB_TOKEN"]
                            ],
                            contentType: 'APPLICATION_JSON',
                            requestBody: """{
                                "body": "**Auto-Merge Enabled!**\\n\\n**Method:** ${params.MERGE_METHOD}\\n **Enabled:** ${env.AUTO_MERGE_ENABLED_AT}\\nüîß **By:** ${env.AUTO_MERGE_ENABLED_BY}\\n\\n**Status:** This PR will automatically merge when all required checks pass.\\n\\n---\\n*Managed by Jenkins Build #${BUILD_NUMBER}*"
                            }"""
                        )

                    } else {
                        echo "Failed to enable auto-merge"
                        echo "Response: ${autoMergeResponse.content}"
                        error("Auto-merge setup failed")
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                echo """
                SUCCESS: MERGE Created!

                Summary:
                - PR Number: #${PR_NUMBER}
                //- PR URL: ${env.PR_URL}
                //- Source Branch: ${params.BRANCH_NAME}
                //- Target Branch: ${params.BASE_BRANCH}
                - Auto-Merge: Enabled (${params.MERGE_METHOD})
                //- Enabled At: ${env.AUTO_MERGE_ENABLED_AT}
                """
            }
        }
        failure {
            script {
                echo "Pipeline failed auto-merge setup"
            }
        }
    }
}